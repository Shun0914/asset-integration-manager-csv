{"ast":null,"code":"/**\n * API通信サービス\n * バックエンドAPIとの通信を管理する関数を提供\n */\nimport axios from 'axios';\n\n// APIのベースURL（開発環境ではプロキシを使用）\nconst API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8000/api';\n\n// Axiosのインスタンスを作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * CSVファイルをアップロードして解析する\n * @param {File} file - アップロードするCSVファイル\n * @returns {Promise<Object>} 解析結果\n */\nexport const uploadCSV = async file => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await apiClient.post('/csv/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      // サーバーからのエラーレスポンス\n      return {\n        success: false,\n        message: error.response.data.message || 'サーバーエラーが発生しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      // リクエストは送信されたがレスポンスがない\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      // リクエスト設定中のエラー\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n/**\n * サンプルポートフォリオデータを取得する\n * @returns {Promise<Object>} サンプルポートフォリオデータ\n */\nexport const getSamplePortfolio = async () => {\n  try {\n    const response = await apiClient.get('/csv/sample');\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'サンプルデータの取得に失敗しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n/**\n * ポートフォリオの分析結果を取得する\n * @param {Object} portfolioData - 分析対象のポートフォリオデータ\n * @returns {Promise<Object>} 分析結果\n */\nexport const analyzePortfolio = async portfolioData => {\n  try {\n    const response = await apiClient.post('/portfolio/analyze', portfolioData);\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'ポートフォリオの分析に失敗しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n// エクスポートするAPIクライアント（将来の拡張用）\nexport default apiClient;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","NODE_ENV","apiClient","create","baseURL","headers","uploadCSV","file","formData","FormData","append","response","post","data","error","success","message","request","getSamplePortfolio","get","analyzePortfolio","portfolioData"],"sources":["/Users/shunsukeshimojo/Downloads/mcp_server_demo/asset_integration_manager/frontend/src/services/api.js"],"sourcesContent":["/**\n * API通信サービス\n * バックエンドAPIとの通信を管理する関数を提供\n */\nimport axios from 'axios';\n\n// APIのベースURL（開発環境ではプロキシを使用）\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? '/api'\n  : 'http://localhost:8000/api';\n\n// Axiosのインスタンスを作成\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n/**\n * CSVファイルをアップロードして解析する\n * @param {File} file - アップロードするCSVファイル\n * @returns {Promise<Object>} 解析結果\n */\nexport const uploadCSV = async (file) => {\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await apiClient.post('/csv/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      // サーバーからのエラーレスポンス\n      return {\n        success: false,\n        message: error.response.data.message || 'サーバーエラーが発生しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      // リクエストは送信されたがレスポンスがない\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      // リクエスト設定中のエラー\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n/**\n * サンプルポートフォリオデータを取得する\n * @returns {Promise<Object>} サンプルポートフォリオデータ\n */\nexport const getSamplePortfolio = async () => {\n  try {\n    const response = await apiClient.get('/csv/sample');\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'サンプルデータの取得に失敗しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n/**\n * ポートフォリオの分析結果を取得する\n * @param {Object} portfolioData - 分析対象のポートフォリオデータ\n * @returns {Promise<Object>} 分析結果\n */\nexport const analyzePortfolio = async (portfolioData) => {\n  try {\n    const response = await apiClient.post('/portfolio/analyze', portfolioData);\n    return response.data;\n  } catch (error) {\n    // エラーハンドリング\n    if (error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'ポートフォリオの分析に失敗しました。',\n        error: error.response.data.error || error.message\n      };\n    } else if (error.request) {\n      return {\n        success: false,\n        message: 'サーバーからの応答がありません。ネットワーク接続を確認してください。',\n        error: 'NO_RESPONSE'\n      };\n    } else {\n      return {\n        success: false,\n        message: 'リクエストの送信に失敗しました。',\n        error: error.message\n      };\n    }\n  }\n};\n\n// エクスポートするAPIクライアント（将来の拡張用）\nexport default apiClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}