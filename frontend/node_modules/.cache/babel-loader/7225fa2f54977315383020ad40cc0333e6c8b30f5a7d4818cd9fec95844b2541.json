{"ast":null,"code":"var _jsxFileName = \"/Users/shunsukeshimojo/Downloads/mcp_server_demo/asset_integration_manager/frontend/src/components/Charts/SectorPieChart.jsx\",\n  _s = $RefreshSig$();\n/**\n * セクター配分円グラフコンポーネント\n * ポートフォリオのセクター別構成比を円グラフで表示\n */\nimport React, { useContext, useMemo } from 'react';\nimport { Box, Paper, Typography, useTheme } from '@mui/material';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport { PortfolioContext } from '../../context/PortfolioContext';\n\n// Chart.jsコンポーネントの登録\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend, Title);\n\n// セクターごとの色を定義\nconst sectorColors = {\n  '自動車・輸送機': '#4285F4',\n  // 青\n  '情報・通信': '#EA4335',\n  // 赤\n  '銀行・金融': '#FBBC05',\n  // 黄\n  '電気機器': '#34A853',\n  // 緑\n  'サービス': '#8E24AA',\n  // 紫\n  '食品': '#F4511E',\n  // オレンジ\n  '医薬品': '#00ACC1',\n  // 水色\n  '小売': '#AB47BC',\n  // ピンク紫\n  '建設・不動産': '#6D4C41',\n  // 茶\n  'エネルギー': '#F57C00',\n  // 濃いオレンジ\n  '素材・化学': '#039BE5',\n  // 明るい青\n  '機械': '#546E7A',\n  // グレー青\n  'その他': '#9E9E9E' // グレー\n};\n\n// デフォルトの色配列（セクターが上記にない場合）\nconst defaultColors = ['#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8E24AA', '#F4511E', '#00ACC1', '#AB47BC', '#6D4C41', '#F57C00', '#039BE5', '#546E7A', '#9E9E9E', '#3949AB', '#00897B', '#7CB342', '#FFB300', '#5D4037', '#757575', '#616161'];\nconst SectorPieChart = () => {\n  _s();\n  const theme = useTheme();\n  const {\n    portfolioData\n  } = useContext(PortfolioContext);\n\n  // React Hooksのルールに従い、useMemoをコンポーネントのトップレベルで呼び出す\n  // 条件付きロジックはuseMemoの中に移動\n  const chartData = useMemo(() => {\n    // データが存在しない場合はnullを返す\n    if (!portfolioData || !portfolioData.summary || !portfolioData.summary.sector_allocation) {\n      return null;\n    }\n    const sectorData = portfolioData.summary.sector_allocation;\n    const sectors = Object.keys(sectorData);\n\n    // 各セクターの評価額と割合を計算\n    const values = sectors.map(sector => sectorData[sector]);\n    const total = values.reduce((sum, value) => sum + value, 0);\n    const percentages = values.map(value => value / total * 100);\n\n    // セクター別の色を設定\n    const colors = sectors.map((sector, index) => sectorColors[sector] || defaultColors[index % defaultColors.length]);\n    return {\n      labels: sectors,\n      datasets: [{\n        data: values,\n        backgroundColor: colors,\n        borderColor: colors.map(color => color),\n        borderWidth: 1,\n        hoverOffset: 15\n      }],\n      percentages\n    };\n  }, [portfolioData]);\n\n  // データが存在しない場合はここでチェック\n  if (!chartData) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      sx: {\n        p: 3,\n        textAlign: 'center',\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"\\u30BB\\u30AF\\u30BF\\u30FC\\u60C5\\u5831\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this);\n  }\n\n  // グラフのオプション設定\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'right',\n        labels: {\n          font: {\n            family: theme.typography.fontFamily,\n            size: 12\n          },\n          padding: 15,\n          usePointStyle: true,\n          generateLabels: chart => {\n            const datasets = chart.data.datasets;\n            return chart.data.labels.map((label, i) => {\n              // 未使用の'value'変数を削除し、直接datasets[0].data[i]を使用\n              const percentage = chartData.percentages[i].toFixed(1);\n              return {\n                text: `${label} (${percentage}%)`,\n                fillStyle: datasets[0].backgroundColor[i],\n                hidden: false,\n                index: i\n              };\n            });\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const value = context.raw;\n            const percentage = chartData.percentages[context.dataIndex].toFixed(1);\n            const formattedValue = new Intl.NumberFormat('ja-JP', {\n              style: 'currency',\n              currency: 'JPY',\n              maximumFractionDigits: 0\n            }).format(value);\n            return `${context.label}: ${formattedValue} (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 2,\n    sx: {\n      p: 3,\n      borderRadius: 2,\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      sx: {\n        fontWeight: 'medium',\n        mb: 2\n      },\n      children: \"\\u30BB\\u30AF\\u30BF\\u30FC\\u5225\\u914D\\u5206\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        height: '300px',\n        position: 'relative'\n      },\n      children: /*#__PURE__*/_jsxDEV(Pie, {\n        data: chartData,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(SectorPieChart, \"IPDJBSJ0eeAmGxMSp0dmU2RgYpU=\", false, function () {\n  return [useTheme];\n});\n_c = SectorPieChart;\nexport default SectorPieChart;\nvar _c;\n$RefreshReg$(_c, \"SectorPieChart\");","map":{"version":3,"names":["React","useContext","useMemo","Box","Paper","Typography","useTheme","Chart","ChartJS","ArcElement","Tooltip","Legend","Title","Pie","PortfolioContext","jsxDEV","_jsxDEV","register","sectorColors","defaultColors","SectorPieChart","_s","theme","portfolioData","chartData","summary","sector_allocation","sectorData","sectors","Object","keys","values","map","sector","total","reduce","sum","value","percentages","colors","index","length","labels","datasets","data","backgroundColor","borderColor","color","borderWidth","hoverOffset","elevation","sx","p","textAlign","height","display","alignItems","justifyContent","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","options","responsive","maintainAspectRatio","plugins","legend","position","font","family","typography","fontFamily","size","padding","usePointStyle","generateLabels","chart","label","i","percentage","toFixed","text","fillStyle","hidden","tooltip","callbacks","context","raw","dataIndex","formattedValue","Intl","NumberFormat","style","currency","maximumFractionDigits","format","borderRadius","flexDirection","gutterBottom","fontWeight","mb","flexGrow","_c","$RefreshReg$"],"sources":["/Users/shunsukeshimojo/Downloads/mcp_server_demo/asset_integration_manager/frontend/src/components/Charts/SectorPieChart.jsx"],"sourcesContent":["/**\n * セクター配分円グラフコンポーネント\n * ポートフォリオのセクター別構成比を円グラフで表示\n */\nimport React, { useContext, useMemo } from 'react';\nimport { Box, Paper, Typography, useTheme } from '@mui/material';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, Title } from 'chart.js';\nimport { Pie } from 'react-chartjs-2';\nimport { PortfolioContext } from '../../context/PortfolioContext';\n\n// Chart.jsコンポーネントの登録\nChartJS.register(ArcElement, Tooltip, Legend, Title);\n\n// セクターごとの色を定義\nconst sectorColors = {\n  '自動車・輸送機': '#4285F4', // 青\n  '情報・通信': '#EA4335',     // 赤\n  '銀行・金融': '#FBBC05',     // 黄\n  '電気機器': '#34A853',       // 緑\n  'サービス': '#8E24AA',       // 紫\n  '食品': '#F4511E',           // オレンジ\n  '医薬品': '#00ACC1',         // 水色\n  '小売': '#AB47BC',           // ピンク紫\n  '建設・不動産': '#6D4C41',   // 茶\n  'エネルギー': '#F57C00',     // 濃いオレンジ\n  '素材・化学': '#039BE5',     // 明るい青\n  '機械': '#546E7A',           // グレー青\n  'その他': '#9E9E9E'          // グレー\n};\n\n// デフォルトの色配列（セクターが上記にない場合）\nconst defaultColors = [\n  '#4285F4', '#EA4335', '#FBBC05', '#34A853', '#8E24AA',\n  '#F4511E', '#00ACC1', '#AB47BC', '#6D4C41', '#F57C00',\n  '#039BE5', '#546E7A', '#9E9E9E', '#3949AB', '#00897B',\n  '#7CB342', '#FFB300', '#5D4037', '#757575', '#616161'\n];\n\nconst SectorPieChart = () => {\n  const theme = useTheme();\n  const { portfolioData } = useContext(PortfolioContext);\n\n  // React Hooksのルールに従い、useMemoをコンポーネントのトップレベルで呼び出す\n  // 条件付きロジックはuseMemoの中に移動\n  const chartData = useMemo(() => {\n    // データが存在しない場合はnullを返す\n    if (!portfolioData || !portfolioData.summary || !portfolioData.summary.sector_allocation) {\n      return null;\n    }\n    \n    const sectorData = portfolioData.summary.sector_allocation;\n    const sectors = Object.keys(sectorData);\n    \n    // 各セクターの評価額と割合を計算\n    const values = sectors.map(sector => sectorData[sector]);\n    const total = values.reduce((sum, value) => sum + value, 0);\n    const percentages = values.map(value => (value / total) * 100);\n    \n    // セクター別の色を設定\n    const colors = sectors.map((sector, index) => \n      sectorColors[sector] || defaultColors[index % defaultColors.length]\n    );\n    \n    return {\n      labels: sectors,\n      datasets: [\n        {\n          data: values,\n          backgroundColor: colors,\n          borderColor: colors.map(color => color),\n          borderWidth: 1,\n          hoverOffset: 15\n        }\n      ],\n      percentages\n    };\n  }, [portfolioData]);\n\n  // データが存在しない場合はここでチェック\n  if (!chartData) {\n    return (\n      <Paper \n        elevation={2} \n        sx={{ \n          p: 3, \n          textAlign: 'center', \n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n      >\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          セクター情報がありません\n        </Typography>\n      </Paper>\n    );\n  }\n\n  // グラフのオプション設定\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'right',\n        labels: {\n          font: {\n            family: theme.typography.fontFamily,\n            size: 12\n          },\n          padding: 15,\n          usePointStyle: true,\n          generateLabels: (chart) => {\n            const datasets = chart.data.datasets;\n            return chart.data.labels.map((label, i) => {\n              // 未使用の'value'変数を削除し、直接datasets[0].data[i]を使用\n              const percentage = chartData.percentages[i].toFixed(1);\n              return {\n                text: `${label} (${percentage}%)`,\n                fillStyle: datasets[0].backgroundColor[i],\n                hidden: false,\n                index: i\n              };\n            });\n          }\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: (context) => {\n            const value = context.raw;\n            const percentage = chartData.percentages[context.dataIndex].toFixed(1);\n            const formattedValue = new Intl.NumberFormat('ja-JP', {\n              style: 'currency',\n              currency: 'JPY',\n              maximumFractionDigits: 0\n            }).format(value);\n            return `${context.label}: ${formattedValue} (${percentage}%)`;\n          }\n        }\n      }\n    }\n  };\n\n  return (\n    <Paper \n      elevation={2} \n      sx={{ \n        p: 3, \n        borderRadius: 2,\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column'\n      }}\n    >\n      <Typography \n        variant=\"h6\" \n        gutterBottom \n        sx={{ fontWeight: 'medium', mb: 2 }}\n      >\n        セクター別配分\n      </Typography>\n      \n      <Box sx={{ flexGrow: 1, height: '300px', position: 'relative' }}>\n        <Pie data={chartData} options={options} />\n      </Box>\n    </Paper>\n  );\n};\n\nexport default SectorPieChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}